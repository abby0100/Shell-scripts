#!/bin/bash

# add variables
i1=0
if [ "$1" ]; then
	i1=$1
fi

# add functions
function prompt()
{
	read -p "$1 [YES/NO]: " input
}

# script name
function myecho0script()
{
	echo
	echo '==========================================================='
	echo "$1"
	echo '==========================================================='
	echo
}

# task title
function myecho1task()
{
	echo
	if [ "$1" ]; then
		# 蓝底白字
		echo -e "\033[44;37m --> $i1. $1\033[0m"
	fi
	i1=$[$i1+1]
}

# things title
function myechoh2thing()
{
	echo
	# 红色字
	#echo -e "\033[31m - $1 \033[0m"
	# 绿色字
	echo -e "\033[32m - $1 \033[0m"
	# 红底白字
	#echo -e "\033[41;37m- $1\033[0m"
}

# steps title
function myechoh3step()
{
	echo
	echo -e " * $1"
}

# reference title
function myecho4ref()
{
	#echo
	echo -e "\t$1"
}

# highlight title
function myechoy()
{
	echo
	# 黄底黑字
	echo -e "\033[43;30m$1\033[0m"
	#echo -e "\t\t$1"
}

# call outside script
function mysource()
{
	(source $1 $i1)
	i1=$[$i1+1]
}


# new chapter
myecho1task 'Cyclone V SDK for OpenCL 20180508'
myecho4ref 'https://www.altera.com.cn/documentation/ewa1400875619714.html'

myechoh3step 'Cyclone V:	'
myechoh3step 'Arria 10:		1.5 TFLOPS'
myechoh3step 'Stratix 10:		10  TFLOPS'

myechoh3step 'Cyclone V SE SoC'
myechoh2thing 'Cyclone V SX SoC	[Yes]'
myechoh3step 'Cyclone V ST SoC'

#-----------------------------------------------------------------
myechoy '1. Intel FPGA SDK for OpenCL™ Standard Edition Cyclone V SoC Getting Started Guide'

myechoh2thing '1.1 Prerequisites'
myechoh3step 'Hardware Requirements'
myecho4ref 'Cyclone V SoC'
myecho4ref 'root privilege'
myecho4ref '85GB Disk'
myecho4ref '8GB RAM'
myecho4ref 'Window or Linux development system'

myechoh3step 'Software Requirements'
myecho4ref 'Perl >= version 5'
myecho4ref 'set Perl path'


myechoh2thing '1.2 Content'
myechoh3step 'AOC'
myecho4ref 'Intel FPGA SDK for OpenCL Offline Compiler'
myechoh3step 'AOCL'
myecho4ref 'Intel FPGA SDK for OpenCL Standard Edition utility'
myechoh3step 'host runtime'
myecho4ref 'OpenCL host and runtime API'

myechoh3step 'OpenCL Example Applications'
myecho4ref 'https://www.altera.com/products/design-software/embedded-software-developers/opencl/developer-zone.html#design-examples'


myechoh2thing '1.3 Setup process for the Cyclone V SoC'
myechoh3step 'Review prerequisites'
myechoh3step 'Download the tar file and the SoC EDS (Tar file includes SDK, Intel Quartus Prime software, and device support)'
myechoh3step '1. Unpack tar file; 2. Run the setup.bat|sh file; 3. Run the SoC EDS isntaller'
myechoh3step 'Install Cyclone V SoC Development Kit'
myechoh3step 'Set up Cyclone V Development Kit -- 1. Write SD card image onto flash card; 2. Set DIP switches; 3. Terminal Connection; 4. Set env. variables and load Linux kernel driver.'
myechoh3step 'Connect board to network'
myechoh3step 'Run hello_world on FPGA'


myechoh2thing '1.4 Overview of the Intel FPGA SDK for OpenCL Cyclone V SoC Programming Flow'


myechoh2thing '1.5 Cyclone V SoC Development Kit Reference Platform Board Variants'
myechoh3step 'c5soc board'
myechoh3step 'c5soc_sharedonly board'
myecho4ref 'To target this board variant when compiling your OpenCL kernel, include the --board=c5soc_sharedonly option in your aoc command.'


myechoh2thing '1.6 Cyclone V SoC FPGA-Specific OpenCL Design Considerations'
myechoh3step 'Shared memory'
myecho4ref 'Intel FPGA SDK for OpenCL Standard Edition Programming Guide.'

myechoh3step 'Optimize Area'
myecho4ref 'Intel FPGA SDK for OpenCL Standard Edition Best Practices Guide'


#-----------------------------------------------------------------
myechoy '2. Setting Up the Intel FPGA SDK for OpenCL, Intel SoC FPGA Embedded Design Suite, and the Cyclone V SoC Development Kit for Linux'


myechoh2thing '2.1 Upgrading to Current Version of Intel FPGA SDK for OpenCL for SoC FPGA'
myechoh3step 'Update SDK softwares'
myechoh3step 'Reprogram flash card with Upgraded SDK'
myecho4ref 'Writing an SD Card Image File onto the Micro SD Flash Card.'


myechoh2thing '2.2 Downloading the Intel FPGA SDK for OpenCL Standard Edition'
myechoh3step 'Intel FPGA SDK for OpenCL Download Center [Standard Edition]'
	prompt '[Download] http://dl.altera.com/opencl/'


myechoh2thing '2.3 Downloading the Intel SoC FPGA Embedded Development Suite'
myechoh3step 'Intel FPGA SoC EDS Download Center [Standard Edition]'
	prompt '[Download] http://dl.altera.com/soceds/'


myechoh2thing '2.4 Installing the Intel FPGA SDK for OpenCL'
myechoh3step 'install with *.run script'
myecho4ref 'root privilege'
myecho4ref 'Linux gcc'
myecho4ref 'jdk (optional)'
	#cd tools 
	#source setup.sh
	echo $INTELFPGAOCLSDKROOT
	#cd -


myechoh2thing '2.5 Setting the Intel FPGA SDK for OpenCL User Environment Variables for SoC FPGA'
myechoh3step 'write env. script'
	echo $INTELFPGAOCLSDKROOT

	# use variable instead of file name
	filename='my_cycloneV-env.sh-20180509'
	echo "#!/bin/bash" >> $filename
	echo "" >> $filename
	echo "# sdk root" >> $filename
	echo "export PATH=\$INTELFPGAOCLSDKROOT/bin:\$PATH" >> $filename
	echo "export AOCL_BOARD_PACKAGE_ROOT=\$INTELFPGAOCLSDKROOT/board/c5soc" >> $filename

	echo "# library path" >> $filename
	echo "export LD_LIBRARY_PATH=\$INTELFPGAOCLSDKROOT/host/linux64/lib:\$LD_LIBRARY_PATH" >> $filename
	echo "export LD_LIBRARY_PATH=\$AOCL_BOARD_PACKAGE_ROOT/linux64/lib:\$LD_LIBRARY_PATH" >> $filename

	echo "# Quartus path" >> $filename
	echo "export QUARTUS_ROOTDIR_OVERRIDE=<Quartus Prime software installation directory>" >> $filename


myechoh2thing '2.6 Installing the Intel SoC FPGA Embedded Development Suite *** Edition'
myechoh3step 'install with *.run script'
myecho4ref 'contains gcc chain'
	#cd tools/
	#chmod +x SoCEDSSetup-18.0.0.614-linux.run
	#./SoCEDSSetup-18.0.0.614-linux.run
	#cd -


myechoh2thing '2.7 Installing the Cyclone V SoC Development Kit'
myechoh3step 'Writing an SD Card Image onto the Micro SD Flash Card'
myecho4ref 'linux_sd_card_image.tgz (INTELFPGAOCLSDKROOT/board/c5soc/) in Cyclone V SoC Development Kit Reference Platform'
myecho4ref 'check AOCL_BOARD_PACKAGE_ROOT in board_env.xml'
	#tar zxvf linux_sd_card_image.tgz
	#prompt 'Please insert a SD flash card...'
	#dmesg | tail
	prompt 'Warning: flash sd card image to /dev/sde'
	#sudo dd if=linux_sd_card_image of=/dev/sde bs=1M sync

myechoh3step 'Load Image in Micro SD Flash Card'
myecho4ref 'insert sd card back to Cyclone V'
myecho4ref 'https://www.altera.com/documentation/ewa1403875738903.html#ewa1403886518038'
#-----------------------------------------------------------------
mysource 'cycloneV4-create-sd-card-image.sh-20180509*'

myechoh3step 'Configuring the SW3 Switches'
	prompt 'Warning: SW3 1-6 ON/OFF/ON/OFF/ON/ON'

myechoh3step 'Setting Up Terminal Connection'
	prompt 'Warning: Connect micro-USB to J8 on Cyclone V and COM3 on PC'
	prompt 'Warning: Power up Cyclone V'
	
myechoh3step 'Setting Environment Variables and Loading OpenCL Linux Kernel Driver'
myecho4ref 'Running on Cyclone V Board'
	#dmesg | tail
	prompt 'Login as root with no passwd'
	prompt 'set the environment variables'
myecho4ref 'load the OpenCL Linux kernel driver'

myechoh3step 'Connecting the Board to Network via Ethernet'
myecho4ref 'HPS Ethernet port'
myecho4ref 'Secure Shell (SSH)'
myecho4ref 'scp'
myecho4ref 'ip address'
myecho4ref 'shared drive'


myechoh2thing '2.8 Verifying Host Runtime Functionality via Emulation'
myechoh3step 'Downloading an OpenCL Design Example'
myechoh3step 'Compiling a Kernel for Emulation'
myecho4ref '-march=emulator'
myecho4ref '-board=<board_name>'
myechoh3step 'Building the Host Application'
myechoh3step 'Emulating Your OpenCL Kernel'

myechoh3step 'Connecting the Board to Network via Ethernet'
myecho4ref 'HPS Ethernet port'


myechoh2thing '2.9 Creating the Hardware Configuration File of an OpenCL Kernel for SoC FPGA'


myechoh2thing '2.10 Executing an OpenCL Kernel on an SoC FPGA'
myechoh3step 'Running the Host Application'
myechoh3step 'Output from Successful Kernel Execution on the Cyclone V SoC Development Kit'


myechoh2thing '2.11 Uninstalling the Software'
myechoh3step 'Uninstalling the Software'


# new chapter
echo
echo '==========================================================='
echo 'End'

